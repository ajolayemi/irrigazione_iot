-- rename table sensors to weather_stations;
drop policy "Superusers and company members can select" on "public"."sensors";

drop policy "Superusers can create sensors" on "public"."sensors";

drop policy "Superusers can delete sensors" on "public"."sensors";

drop policy "Superusers can update sensors" on "public"."sensors";

revoke delete on table "public"."sensors"
from
    "anon";

revoke insert on table "public"."sensors"
from
    "anon";

revoke references on table "public"."sensors"
from
    "anon";

revoke
select
    on table "public"."sensors"
from
    "anon";

revoke trigger on table "public"."sensors"
from
    "anon";

revoke truncate on table "public"."sensors"
from
    "anon";

revoke
update on table "public"."sensors"
from
    "anon";

revoke delete on table "public"."sensors"
from
    "authenticated";

revoke insert on table "public"."sensors"
from
    "authenticated";

revoke references on table "public"."sensors"
from
    "authenticated";

revoke
select
    on table "public"."sensors"
from
    "authenticated";

revoke trigger on table "public"."sensors"
from
    "authenticated";

revoke truncate on table "public"."sensors"
from
    "authenticated";

revoke
update on table "public"."sensors"
from
    "authenticated";

revoke delete on table "public"."sensors"
from
    "service_role";

revoke insert on table "public"."sensors"
from
    "service_role";

revoke references on table "public"."sensors"
from
    "service_role";

revoke
select
    on table "public"."sensors"
from
    "service_role";

revoke trigger on table "public"."sensors"
from
    "service_role";

revoke truncate on table "public"."sensors"
from
    "service_role";

revoke
update on table "public"."sensors"
from
    "service_role";

alter table "public"."sensors"
drop constraint "public_sensors_company_id_fkey";

alter table "public"."sensors"
drop constraint "public_sensors_sector_id_fkey";

alter table "public"."sensors"
drop constraint "sensors_eui_key";

alter table "public"."sensors"
drop constraint "sensors_name_key";

alter table "public"."sensor_battery_data"
drop constraint "public_sensor_battery_data_sensor_id_fkey";

alter table "public"."sensor_measurements"
drop constraint "public_sensor_measurements_sensor_id_fkey";

alter table "public"."sensors"
drop constraint "sensors_pkey";

drop index if exists "public"."sensors_eui_key";

drop index if exists "public"."sensors_name_key";

drop index if exists "public"."sensors_pkey";

drop table "public"."sensors";

create table
    "public"."weather_stations" (
        "id" bigint generated by default as identity not null,
        "name" text not null,
        "eui" text not null,
        "company_id" bigint not null,
        "sector_id" bigint not null,
        "created_at" timestamp
        with
            time zone not null default now (),
            "updated_at" timestamp
        with
            time zone not null
    );

alter table "public"."weather_stations" enable row level security;

CREATE UNIQUE INDEX sensors_eui_key ON public.weather_stations USING btree (eui);

CREATE UNIQUE INDEX sensors_name_key ON public.weather_stations USING btree (name);

CREATE UNIQUE INDEX sensors_pkey ON public.weather_stations USING btree (id);

alter table "public"."weather_stations" add constraint "weather_stations_pkey" PRIMARY KEY using index "sensors_pkey";

alter table "public"."weather_stations" add constraint "public_sensors_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies (id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."weather_stations" validate constraint "public_sensors_company_id_fkey";

alter table "public"."weather_stations" add constraint "public_sensors_sector_id_fkey" FOREIGN KEY (sector_id) REFERENCES sectors (id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."weather_stations" validate constraint "public_sensors_sector_id_fkey";

alter table "public"."weather_stations" add constraint "sensors_eui_key" UNIQUE using index "sensors_eui_key";

alter table "public"."weather_stations" add constraint "sensors_name_key" UNIQUE using index "sensors_name_key";

alter table "public"."sensor_battery_data" add constraint "public_sensor_battery_data_sensor_id_fkey" FOREIGN KEY (sensor_id) REFERENCES weather_stations (id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."sensor_battery_data" validate constraint "public_sensor_battery_data_sensor_id_fkey";

alter table "public"."sensor_measurements" add constraint "public_sensor_measurements_sensor_id_fkey" FOREIGN KEY (sensor_id) REFERENCES weather_stations (id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."sensor_measurements" validate constraint "public_sensor_measurements_sensor_id_fkey";

grant delete on table "public"."weather_stations" to "anon";

grant insert on table "public"."weather_stations" to "anon";

grant references on table "public"."weather_stations" to "anon";

grant
select
    on table "public"."weather_stations" to "anon";

grant trigger on table "public"."weather_stations" to "anon";

grant truncate on table "public"."weather_stations" to "anon";

grant
update on table "public"."weather_stations" to "anon";

grant delete on table "public"."weather_stations" to "authenticated";

grant insert on table "public"."weather_stations" to "authenticated";

grant references on table "public"."weather_stations" to "authenticated";

grant
select
    on table "public"."weather_stations" to "authenticated";

grant trigger on table "public"."weather_stations" to "authenticated";

grant truncate on table "public"."weather_stations" to "authenticated";

grant
update on table "public"."weather_stations" to "authenticated";

grant delete on table "public"."weather_stations" to "service_role";

grant insert on table "public"."weather_stations" to "service_role";

grant references on table "public"."weather_stations" to "service_role";

grant
select
    on table "public"."weather_stations" to "service_role";

grant trigger on table "public"."weather_stations" to "service_role";

grant truncate on table "public"."weather_stations" to "service_role";

grant
update on table "public"."weather_stations" to "service_role";

create policy "Superusers and company members can select" on "public"."weather_stations" as permissive for
select
    to authenticated using (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = weather_stations.company_id)
            )
        )
    );

create policy "Superusers can create weather stations" on "public"."weather_stations" as permissive for insert to authenticated
with
    check (
        (
            (
                EXISTS (
                    SELECT
                        1
                    FROM
                        companies
                    WHERE
                        (companies.id = weather_stations.company_id)
                )
            )
            AND check_if_user_is_superuser (get_user_email_v2 ())
        )
    );

create policy "Superusers can delete weather stations" on "public"."weather_stations" as permissive for delete to authenticated using (
    (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = weather_stations.company_id)
            )
        )
        AND check_if_user_is_superuser (get_user_email_v2 ())
    )
);

create policy "Superusers can update weather stations" on "public"."weather_stations" as permissive for
update to authenticated using (
    (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = weather_stations.company_id)
            )
        )
        AND check_if_user_is_superuser (get_user_email_v2 ())
    )
);