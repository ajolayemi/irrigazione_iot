--- create table
create table
    public.sensors (
        id bigint generated by default as identity,
        name text not null,
        eui text not null,
        company_id bigint not null,
        sector_id bigint not null,
        created_at timestamp
        with
            time zone not null default now (),
            updated_at timestamp
        with
            time zone not null,
            constraint sensors_pkey primary key (id),
            constraint sensors_name_key unique (name),
            constraint sensors_eui_key unique (eui),
            constraint public_sensors_company_id_fkey foreign key (company_id) references companies (id) on update restrict on delete cascade,
            constraint public_sensors_sector_id_fkey foreign key (sector_id) references sectors (id) on update restrict on delete cascade
    ) tablespace pg_default;

--- drop policy if it already exists
drop policy if exists "Superusers and company members can select" on public.sensors;

-- create policy
create policy "Superusers and company members can select" on public.sensors for
select
    to authenticated using (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = sensors.company_id)
            )
        )
    );

-- drop existing insert policy if exists
drop policy if exists "Superusers can create sensors" on public.sensors;

-- create insert policy for sensors
create policy "Superusers can create sensors" on public.sensors for insert to authenticated
with
    check (
        (
            (
                EXISTS (
                    SELECT
                        1
                    FROM
                        companies
                    WHERE
                        (companies.id = sensors.company_id)
                )
            )
            AND check_if_user_is_superuser (get_user_email_v2 ())
        )
    );

-- drop existing delete policy
drop policy if exists "Superusers can delete sensors" on public.sensors;

-- create policy
create policy "Superusers can delete sensors" on public.sensors for delete to authenticated using (
    (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = sensors.company_id)
            )
        )
        AND check_if_user_is_superuser (get_user_email_v2 ())
    )
);

-- drop existing update policy
drop policy if exists "Superusers can update sensors" on public.sensors;

create policy "Superusers can update sensors" on public.sensors for
update to authenticated using (
    (
        (
            EXISTS (
                SELECT
                    1
                FROM
                    companies
                WHERE
                    (companies.id = sensors.company_id)
            )
        )
        AND check_if_user_is_superuser (get_user_email_v2 ())
    )
);