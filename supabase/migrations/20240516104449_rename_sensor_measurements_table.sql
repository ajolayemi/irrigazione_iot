drop policy "Superusers and company members can select" on "public"."sensor_measurements";

revoke delete on table "public"."sensor_measurements"
from
    "anon";

revoke insert on table "public"."sensor_measurements"
from
    "anon";

revoke references on table "public"."sensor_measurements"
from
    "anon";

revoke
select
    on table "public"."sensor_measurements"
from
    "anon";

revoke trigger on table "public"."sensor_measurements"
from
    "anon";

revoke truncate on table "public"."sensor_measurements"
from
    "anon";

revoke
update on table "public"."sensor_measurements"
from
    "anon";

revoke delete on table "public"."sensor_measurements"
from
    "authenticated";

revoke insert on table "public"."sensor_measurements"
from
    "authenticated";

revoke references on table "public"."sensor_measurements"
from
    "authenticated";

revoke
select
    on table "public"."sensor_measurements"
from
    "authenticated";

revoke trigger on table "public"."sensor_measurements"
from
    "authenticated";

revoke truncate on table "public"."sensor_measurements"
from
    "authenticated";

revoke
update on table "public"."sensor_measurements"
from
    "authenticated";

revoke delete on table "public"."sensor_measurements"
from
    "service_role";

revoke insert on table "public"."sensor_measurements"
from
    "service_role";

revoke references on table "public"."sensor_measurements"
from
    "service_role";

revoke
select
    on table "public"."sensor_measurements"
from
    "service_role";

revoke trigger on table "public"."sensor_measurements"
from
    "service_role";

revoke truncate on table "public"."sensor_measurements"
from
    "service_role";

revoke
update on table "public"."sensor_measurements"
from
    "service_role";

alter table "public"."sensor_measurements"
drop constraint "public_sensor_measurements_sensor_id_fkey";

alter table "public"."sensor_measurements"
drop constraint "sensor_measurements_pkey";

drop index if exists "public"."sensor_measurements_pkey";

drop table "public"."sensor_measurements";

create table
    "public"."weather_station_measurements" (
        "id" bigint generated by default as identity not null,
        "air_temperature" real not null,
        "air_humidity" real not null,
        "light_intensity" real not null,
        "uv_index" real not null,
        "wind_speed" real not null,
        "rain_gauge" real not null,
        "barometric_pressure" real not null,
        "created_at" timestamp
        with
            time zone not null default now (),
            "weather_station_id" bigint not null,
            "wind_direction_sensor" real not null
    );

alter table "public"."weather_station_measurements" enable row level security;

CREATE UNIQUE INDEX sensor_measurements_pkey ON public.weather_station_measurements USING btree (id);

alter table "public"."weather_station_measurements" add constraint "sensor_measurements_pkey" PRIMARY KEY using index "sensor_measurements_pkey";

alter table "public"."weather_station_measurements" add constraint "public_weather_station_measurements_weather_station_id_fkey" FOREIGN KEY (weather_station_id) REFERENCES weather_stations (id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."weather_station_measurements" validate constraint "public_weather_station_measurements_weather_station_id_fkey";

grant delete on table "public"."weather_station_measurements" to "anon";

grant insert on table "public"."weather_station_measurements" to "anon";

grant references on table "public"."weather_station_measurements" to "anon";

grant
select
    on table "public"."weather_station_measurements" to "anon";

grant trigger on table "public"."weather_station_measurements" to "anon";

grant truncate on table "public"."weather_station_measurements" to "anon";

grant
update on table "public"."weather_station_measurements" to "anon";

grant delete on table "public"."weather_station_measurements" to "authenticated";

grant insert on table "public"."weather_station_measurements" to "authenticated";

grant references on table "public"."weather_station_measurements" to "authenticated";

grant
select
    on table "public"."weather_station_measurements" to "authenticated";

grant trigger on table "public"."weather_station_measurements" to "authenticated";

grant truncate on table "public"."weather_station_measurements" to "authenticated";

grant
update on table "public"."weather_station_measurements" to "authenticated";

grant delete on table "public"."weather_station_measurements" to "service_role";

grant insert on table "public"."weather_station_measurements" to "service_role";

grant references on table "public"."weather_station_measurements" to "service_role";

grant
select
    on table "public"."weather_station_measurements" to "service_role";

grant trigger on table "public"."weather_station_measurements" to "service_role";

grant truncate on table "public"."weather_station_measurements" to "service_role";

grant
update on table "public"."weather_station_measurements" to "service_role";

create policy "Superusers and company members can select" on "public"."weather_station_measurements" as permissive for
select
    to authenticated using (
        (
            (
                EXISTS (
                    SELECT
                        1
                    FROM
                        companies
                    WHERE
                        (
                            companies.id = get_sensor_company_id (weather_station_measurements.weather_station_id)
                        )
                )
            )
            OR check_if_user_is_superuser (get_user_email_v2 ())
        )
    );